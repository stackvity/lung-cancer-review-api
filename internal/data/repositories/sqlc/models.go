// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package postgres

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ContentType string

const (
	ContentTypeImage   ContentType = "image"
	ContentTypeReport  ContentType = "report"
	ContentTypeLabtest ContentType = "labtest"
)

func (e *ContentType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ContentType(s)
	case string:
		*e = ContentType(s)
	default:
		return fmt.Errorf("unsupported scan type for ContentType: %T", src)
	}
	return nil
}

type NullContentType struct {
	ContentType ContentType `json:"content_type"`
	Valid       bool        `json:"valid"` // Valid is true if ContentType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullContentType) Scan(value interface{}) error {
	if value == nil {
		ns.ContentType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ContentType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullContentType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ContentType), nil
}

type ReportType string

const (
	ReportTypeRadiology ReportType = "radiology"
	ReportTypePathology ReportType = "pathology"
	ReportTypeLab       ReportType = "lab"
)

func (e *ReportType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReportType(s)
	case string:
		*e = ReportType(s)
	default:
		return fmt.Errorf("unsupported scan type for ReportType: %T", src)
	}
	return nil
}

type NullReportType struct {
	ReportType ReportType `json:"report_type"`
	Valid      bool       `json:"valid"` // Valid is true if ReportType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReportType) Scan(value interface{}) error {
	if value == nil {
		ns.ReportType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReportType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReportType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReportType), nil
}

type Analysisresult struct {
	ResultID                 pgtype.UUID        `json:"result_id"`
	SessionID                pgtype.UUID        `json:"session_id"`
	Diagnosis                []byte             `json:"diagnosis"`
	Stage                    []byte             `json:"stage"`
	TreatmentRecommendations []byte             `json:"treatment_recommendations"`
	CreatedAt                pgtype.Timestamptz `json:"created_at"`
	UpdatedAt                pgtype.Timestamptz `json:"updated_at"`
}

type Analysisresultexternalresource struct {
	ResultID   pgtype.UUID `json:"result_id"`
	ResourceID int32       `json:"resource_id"`
}

type Auditlog struct {
	LogID     int64              `json:"log_id"`
	Timestamp pgtype.Timestamptz `json:"timestamp"`
	Action    string             `json:"action"`
	Details   []byte             `json:"details"`
	SessionID pgtype.UUID        `json:"session_id"`
	ContentID pgtype.UUID        `json:"content_id"`
	ResultID  pgtype.UUID        `json:"result_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type Diagnosis struct {
	ID            pgtype.UUID        `json:"id"`
	ResultID      pgtype.UUID        `json:"result_id"`
	SessionID     pgtype.UUID        `json:"session_id"`
	DiagnosisText pgtype.Text        `json:"diagnosis_text"`
	Confidence    pgtype.Text        `json:"confidence"`
	Justification pgtype.Text        `json:"justification"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
}

type Externalresource struct {
	ResourceID  int32       `json:"resource_id"`
	Name        string      `json:"name"`
	Url         string      `json:"url"`
	Description pgtype.Text `json:"description"`
}

type Finding struct {
	FindingID        pgtype.UUID        `json:"finding_id"`
	FileID           pgtype.UUID        `json:"file_id"`
	FindingType      string             `json:"finding_type"`
	Description      string             `json:"description"`
	ImageCoordinates []float64          `json:"image_coordinates"`
	Source           string             `json:"source"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
}

type Image struct {
	ID                pgtype.UUID        `json:"id"`
	StudyID           pgtype.UUID        `json:"study_id"`
	FilePath          string             `json:"file_path"`
	SeriesInstanceUid string             `json:"series_instance_uid"`
	SopInstanceUid    string             `json:"sop_instance_uid"`
	ImageType         string             `json:"image_type"`
	ContentData       []byte             `json:"content_data"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
}

type Patientsession struct {
	SessionID           pgtype.UUID        `json:"session_id"`
	AccessLink          string             `json:"access_link"`
	ExpirationTimestamp pgtype.Timestamptz `json:"expiration_timestamp"`
	Used                bool               `json:"used"`
	PatientData         []byte             `json:"patient_data"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
}

type Prompt struct {
	PromptID       pgtype.UUID        `json:"prompt_id"`
	Description    pgtype.Text        `json:"description"`
	Template       string             `json:"template"`
	InputVariables pgtype.Text        `json:"input_variables"`
	OutputFormat   pgtype.Text        `json:"output_format"`
	Version        string             `json:"version"`
	Author         pgtype.Text        `json:"author"`
	Status         string             `json:"status"`
	ApprovalStatus pgtype.Text        `json:"approval_status"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

type Report struct {
	ID         pgtype.UUID        `json:"id"`
	PatientID  pgtype.UUID        `json:"patient_id"`
	Filename   string             `json:"filename"`
	ReportType ReportType         `json:"report_type"`
	ReportText pgtype.Text        `json:"report_text"`
	Filepath   string             `json:"filepath"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type Stage struct {
	ID         pgtype.UUID        `json:"id"`
	ResultID   pgtype.UUID        `json:"result_id"`
	SessionID  pgtype.UUID        `json:"session_id"`
	T          pgtype.Text        `json:"t"`
	N          pgtype.Text        `json:"n"`
	M          pgtype.Text        `json:"m"`
	Confidence pgtype.Text        `json:"confidence"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type Study struct {
	ID               pgtype.UUID        `json:"id"`
	PatientID        pgtype.UUID        `json:"patient_id"`
	StudyInstanceUid string             `json:"study_instance_uid"`
	StudyData        []byte             `json:"study_data"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
}

type Treatmentrecommendation struct {
	ID              pgtype.UUID        `json:"id"`
	ResultID        pgtype.UUID        `json:"result_id"`
	SessionID       pgtype.UUID        `json:"session_id"`
	DiagnosisID     pgtype.UUID        `json:"diagnosis_id"`
	TreatmentOption pgtype.Text        `json:"treatment_option"`
	Rationale       pgtype.Text        `json:"rationale"`
	Benefits        pgtype.Text        `json:"benefits"`
	Risks           pgtype.Text        `json:"risks"`
	SideEffects     pgtype.Text        `json:"side_effects"`
	Confidence      pgtype.Text        `json:"confidence"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
}

type Uploadedcontent struct {
	ContentID   pgtype.UUID        `json:"content_id"`
	SessionID   pgtype.UUID        `json:"session_id"`
	ContentType ContentType        `json:"content_type"`
	FilePath    string             `json:"file_path"`
	StudyData   []byte             `json:"study_data"`
	ContentData []byte             `json:"content_data"`
	Findings    []byte             `json:"findings"`
	Nodules     []byte             `json:"nodules"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}
